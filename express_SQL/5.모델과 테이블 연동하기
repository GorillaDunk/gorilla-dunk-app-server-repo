이제 COWORK Database에 Members Table이 직원의 정보를 가지고있다. 

이제 Member 모델을 통해 Members 테이블을 조작할 수 있도록 모델과 테이블을 연동시켜줘야한다.
이 연동시키는 부분이 ORM의 핵심이다. 

모델은 이미 이전의 코드에서 생성이 되었었다. 
Recall:
npx sequelize model:geneate --name Member --attributes
name:string,team:string,position:string,emailAddress:string,phoneNumber:string,admissionDate:date,birthday:date,profileImage:string

models directory안의 member파일이다. 

member파일에서 공개하고 있는 함수를 보면
Member클래스에 Model클래스를 상속받고있는걸 볼 수 있다. 
이렇게 상속을 받게되면 Member클래스는 모델이 된다. 
DB에 있는 하나의 테이블에 대응되는 존재가 되는것이다. 
Member.init 부분이 바로 모델과 테이블을 연동하는 부분이다.
init 메소드에는 두개의 객체가 인자로 들어가있는것을 볼 수 있다. 
첫 번째 객체는 Members테이블에 컬럼들에 대응하는 각 property와 데이터 타입이 보인다. 아무리 DB 테이블에 프로퍼티가 존재해도 여기서 설정해주지 않으면 모델이 해당 컬럼을 인식할 수 없다. 
그래서 컬럼 하나도 빠짐없이 적어줘야한다. 
두번째 객체는 sequelize프로퍼티가 이쓴데 sequelize:sequelize와 같은 의미이다.
이 sequelize 객체는 나중에 이 전체 함수에 전달될 sequelize 객체를 의미한다. 즉, exports 다음에 오는 인자들 중 첫번째 sequelize라고 적힌 인자를 의미.
나중에 sequelize객체를 생성해서 전체 함수의 인자로 넘겨줄건데 그 sequelize 객체가 MEmber.init안의 두번째 객체의 sequelize로 들어가서 MEmber 모델이 실제 DB에 존재하는 Members테이블을 인식하는데 사용된다. 
그리고 함수의 마지막에는 테이블과의 연동처리가 끝난 Member모델을 리턴한다. 

하지만 여기서 보면 id프로퍼티가 안 보인다. 보통은 id값을 직접 안 넣기 때문에 안 넣음.
하지만 우리는 id프로퍼티를 직접 직원정보에 넣을거기 때문에 id프로퍼티를 적어주자. 
id 객체를 migrations안의js 파일로부터 복사해서 models의 members.js의 Member.init안에 첫번째 객체에 붙여넣어보자. 
이때 수정해줘야하는게 type: Sequelize.INTEGER 부분을 DataTypes.INTEGER로 바꿔주자.

참고로 Sequelize.INTEGER와 Sequelize.datatypes.INTEGER는 같은 의미이다.
그런데도 DataTypes.INTEGER로 바꾸는 이유는 전체 함수의 두번째 DataTypes에 Sequelize.DataTypes를 넣어줄거기 때문에 그냥 DataTypes.INTEGER로 바꾼것이다.
이렇게되면 앞으로 모델에서 id프로퍼티를 인식한다. 

이제 sequeize 객체를 생성해서 함수에 넣어주자. 
어떻게 해야할까? 그런 코드들은 이전의 modls 디렉토리안에서 자동으로 생성된index.js파일에 존재한다. 
index.js파일을 보면 index.js 파일로 가보자!

이후 index.js파일과 app.js에서 작업을 해주었다. ㄴ


